<?php@require_once APP_DIR . 'config.php';@require_once APP_DIR . 'corefuncs.php';@require_once APP_DIR . 'myfuncs.php';class Request {    private $_pathprefix = null;    private $_controller = null;    private $_method = null;    private static $_context = null;    public static function getContext() {        if (self::$_context === null) {            self::$_context = new self;        }        return self::$_context;    }    public function isAjax() {        if (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {            return true;        }        return false;    }    public function isPost() {        return ($_SERVER['REQUEST_METHOD'] === 'POST');    }    public function getPathPrefix() {        return $this->_pathprefix;    }    public function getController() {        return strtolower($this->_controller);    }    public function getMethod() {        return strtolower($this->_method);    }    public function setPathPrefix($pathprefix = null) {        $this->_pathprefix = $pathprefix;    }    public function setController($controllername = null) {        $this->_controller = strtolower($controllername);    }    public function setMethod($methodname = null) {        $this->_method = strtolower($methodname);    }}class Dispatcher {    public static function process(Request &$request) {        $uriparts = explode('/', str_replace(PATH_URI, '', $_SERVER['REQUEST_URI']));        $uriparts = array_filter($uriparts);        $controller = ($c = array_shift($uriparts)) ? $c : MAIN_CONTROLLER;        $pathfrefix = '';        $mpathprefix = '';        if (in_array($controller, unserialize(PATH_PREFIX))) {            $pathfrefix = strtolower($controller);            $mpathprefix = $pathfrefix . '_';            $controller = ($c = array_shift($uriparts)) ? $c : MAIN_CONTROLLER;        }        $controllerfile = CONT_DIR . strtolower($controller) . '.php';        if (!preg_match('#^[A-Za-z0-9_-]+$#', $controller) || !is_readable($controllerfile)) {            $controller = MAIN_CONTROLLER;            $controllerfile = CONT_DIR . MAIN_CONTROLLER . '.php';        }        $cont = 'c' . $controller;        $method = ($c = array_shift($uriparts)) ? $mpathprefix . str_replace(unserialize(PATH_PREFIX), '', $c) : $mpathprefix . MAIN_METHOD;        $args = (isset($uriparts[0])) ? $uriparts : array();        @require_once $controllerfile;        if (!is_callable(array($cont, $method))) {            $method = MAIN_METHOD;        }        $request->setPathPrefix($pathfrefix);        $request->setController($controller);        $request->setMethod($method);        $cont = new $cont;        call_user_func_array(array($cont, $method), $args);    }}class View {    public static function assign(array &$vars = array(), $file = null) {        if (is_array($vars)) {            extract($vars);        }        ob_start();        @include VIEW_DIR . strtolower($file) . '.php';        return ob_get_clean();    }    public static function display(array &$vars = array(), $file = null) {        if ($file == null) {            $req = Request::getContext();            $file = strtolower($req->getController() . '/' . $req->getMethod());        }        if (!isset($vars['layout'])) {            if (getCurrentUserType() == 'superadmin') {                $playout = 'layouts/adminlayout';            } else {                $playout = 'layouts/mainlayout';            }            $vars['mainregion'] = self::assign($vars, $file);        } else {            if ($vars['layout']) {                $playout = $vars['layout'];            } else {                $playout = $file;            }        }        if (is_array($vars)) {            extract($vars);        }        $splashmsgs[] = self::getSplashMsg();        @include VIEW_DIR . strtolower($playout) . '.php';    }    public static function addSplashMsg($msg = null) {        if ($msg) {            Session::getContext()->splashmessage = $msg;        }    }    public static function getSplashMsg() {        $sess = Session::getContext();        $msg = $sess->splashmessage;        $sess->splashmessage = null;        return $msg;    }}