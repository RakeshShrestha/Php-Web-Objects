<?phpfinal class Session_Database {    private $_db = null;    public function __construct() {        $this->_db = DB::getContext();        session_set_save_handler(                array(&$this, "_open"), array(&$this, "_close"), array(&$this, "_read"), array(&$this, "_write"), array(&$this, "_destroy"), array(&$this, "_gc")        );        @session_start();        if (SESS_TIMEOUT)            $this->_verifyInactivity(SESS_TIMEOUT);    }    public function set($key, $value) {        $_SESSION[$key] = $value;    }    public function get($key) {        return isset($_SESSION[$key]) ? $_SESSION[$key] : '';    }    public function getId() {        return session_id();    }    public function delete($key) {        unset($_SESSION[$key]);    }    public function _open() {        if ($this->_db) {            return true;        }        return false;    }    public function _close() {        if ($this->_db->close()) {            return true;        }        return false;    }    public function _read($id) {        $stmt = $this->_db->prepare('SELECT data FROM sessions WHERE id = ? ');        $stmt->bindValue(1, $id);        $stmt->execute();        if ($stmt->rowCount() == 1) {            $row = $stmt->fetch();            return $row->data;        } else {            return '';        }    }    public function _write($id, $data) {        $access = time();        $stmt = $this->_db->prepare('REPLACE INTO sessions VALUES (?, ?, ?) ');        $stmt->bindValue(1, $id);        $stmt->bindValue(2, $data);        $stmt->bindValue(3, $access);        if ($stmt->execute()) {            return true;        }        return false;    }    public function _destroy($id) {        $stmt = $this->_db->prepare('DELETE FROM sessions WHERE id = ? ');        $stmt->bindValue(1, $id);        if ($stmt->execute()) {            return true;        }        return false;    }    public function _gc($max = 0) {        $old = time() - $max;        $stmt = $this->_db->prepare('DELETE * FROM sessions WHERE last_accessed < ? ');        $stmt->bindValue(1, $old);        if ($stmt->execute()) {            return true;        }        return false;    }    private function _verifyInactivity($maxtime = 0) {        if (!$this->get('activity_time')) {            $this->set('activity_time', time());        }        if ((time() - $this->get('activity_time')) > $maxtime) {            $this->destroy();        } else {            $this->set('activity_time', time());        }    }}